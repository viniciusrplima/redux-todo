{"version":3,"sources":["classes/Item.js","components/TodoForm.js","actions/listActions.js","components/Card.js","components/ListItem.js","components/TodoList.js","components/Modal.js","App.js","reducers/listReducer.js","serviceWorker.js","index.js"],"names":["Item","text","lastId","this","loadLastId","id","done","console","log","saveLastId","JSON","parse","localStorage","getItem","setItem","stringify","TodoForm","onHideModal","editMode","itemEdit","dispatch","useDispatch","useState","setText","useEffect","className","onSubmit","event","preventDefault","type","payload","addItem","onChange","t","target","value","ListItem","children","DoneImg","src","item","onEditItem","key","onClick","TodoList","items","useSelector","state","map","Modal","show","store","createStore","action","filter","it","actualState","loadState","subscribe","getState","App","showModal","setShowModal","setEditMode","setItemEdit","onShowModal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc647030.chunk.js","sourcesContent":["\nconst LAST_ID = 'savedLastId';\n\nexport default class Item {\n\n    static lastId = 0;\n\n    constructor(text) {\n        if(Item.lastId === 0)\n            Item.lastId = this.loadLastId();\n\n        this.id = Item.lastId++;\n        this.text = text;\n        this.done = false;\n\n        console.log(this.id);\n        this.saveLastId(Item.lastId);\n    }\n\n    loadLastId() {\n        const lastId = JSON.parse(localStorage.getItem(LAST_ID));\n\n        if(lastId)\n            return lastId;\n        else\n            return 0;\n    }\n\n    saveLastId( lastId ) {\n        localStorage.setItem(LAST_ID, JSON.stringify(lastId));\n    }\n}","import React, { useState, useEffect } from 'react';\nimport './styles/TodoForm.css';\nimport { useDispatch } from 'react-redux';\nimport { addItem, editItem } from '../actions/listActions';\n\nexport default function TodoForm({ onHideModal, editMode, itemEdit }) {\n\n    const dispatch = useDispatch();\n    const [text, setText] = useState(\"\");\n\n    useEffect(() => {\n        if(editMode) {\n            setText(itemEdit.text);\n        }\n    }, [editMode, itemEdit]);\n\n    const handleChange = event => {\n        let t = event.target.value;\n        setText(t);\n    }\n\n    const onSubmit = event => {\n        event.preventDefault();\n        if(text) {\n            if(editMode) {\n                itemEdit.text = text;\n                dispatch(editItem( itemEdit ));\n            }\n            else {\n                dispatch(addItem( text ));\n            }\n            setText(\"\");\n            onHideModal();\n        }\n    }\n\n    return (\n        <form className=\"TodoForm\" onSubmit={onSubmit}>\n            <input className=\"text-input\" type=\"text\" onChange={handleChange} value={text}/>\n            <button className=\"button\">+</button>\n        </form>\n    )\n}","\nimport Item from '../classes/Item';\n\n\nexport function addItem( text ) {\n    return ({ \n        type: 'ADD_ITEM', \n        payload: new Item(text)\n    });\n}\n\nexport function removeItem( id ) {\n    return ({\n        type: 'REMOVE_ITEM', \n        payload: id\n    });\n}\n\nexport function editItem( item ) {\n    return ({\n        type: 'EDIT_ITEM', \n        payload: item\n    });\n}\n\nexport function changeDone( id ) {\n    return ({\n        type: 'CHANGE_DONE', \n        payload: id\n    });\n}","import React from 'react';\nimport './styles/Card.css';\n\nexport default function ListItem({ className, children }) {\n\n    return (\n        <div className={ className ? `${ className } Card` : \"Card\" }>\n            { children }\n        </div>\n    )\n}","import React from 'react';\nimport Card from './Card';\nimport { useDispatch } from 'react-redux';\nimport { changeDone, removeItem } from '../actions/listActions';\nimport './styles/ListItem.css';\n\nfunction DoneImg({ done }) {\n\n    if( done ) {\n        return (<img src={\"./tick-inside-circle-green.png\"} />);\n    }\n    else {\n        return (<img src={\"./tick-inside-circle.png\"} />);      \n    }\n}\n\nexport default function ListItem({ item, onEditItem }) {\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"ListItem\">\n            <Card className=\"card\" key={ item.id }>\n                <p className={ item.done ? \"caption done\" : \"caption\" }>{ item.text }</p>\n                <div className=\"button-set\">\n                    <button onClick={ () => {dispatch(changeDone( item.id ))} }>\n                        <DoneImg done={ item.done } />\n                    </button>\n                    <button onClick={ () => onEditItem( item ) }>\n                        <img src=\"./pencil-edit-button.png\" />\n                    </button>\n                    <button onClick={ () => {dispatch(removeItem( item.id ))} }>\n                        <img src=\"./recycle-bin.png\" />\n                    </button>\n                </div>\n            </Card>\n        </div>\n    )\n}","import React from 'react';\nimport './styles/TodoList.css';\nimport ListItem from './ListItem';\nimport { useSelector } from 'react-redux';\n\nexport default function TodoList({ onEditItem }) {\n\n    const items = useSelector(state => state);\n\n    return (\n        <div className=\"TodoList\">\n            { items.map( item => (\n                <ListItem \n                    key={ item.id }\n                    item={ item }\n                    onEditItem={ onEditItem }\n                />\n            ))}\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport Card from './Card';\nimport './styles/Modal.css';\n\nexport default function Modal({ children, show, onHideModal }) {\n\n    const hideModal = event => {\n        if(event.target.id === \"modal\") {\n            onHideModal();\n        }\n    }\n\n    return (\n        <div id=\"modal\" onClick={hideModal} className={ show ? \"Modal\" : \"Modal hide\"}>\n            <Card className=\"cardModal\">\n                { children }\n            </Card>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport Modal from './components/Modal';\nimport { createStore } from 'redux';\nimport listReducer from './reducers/listReducer';\nimport { Provider } from 'react-redux';\nimport './App.css';\n\nconst SAVED_ITEMS = 'savedItems';\n\nfunction persistState(state) {\n  localStorage.setItem(SAVED_ITEMS, JSON.stringify(state));\n}\n\nfunction loadState() {\n  const actualState = JSON.parse(localStorage.getItem(SAVED_ITEMS));\n  if(actualState) \n    return actualState;\n  else \n    return [];\n}\n\nconst store = createStore(listReducer, loadState());\n\nstore.subscribe(() => {\n  persistState(store.getState());\n});\n\n\nfunction App() {\n\n  const [showModal, setShowModal] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [itemEdit, setItemEdit] = useState(null);\n\n  const onHideModal = () => {\n    setShowModal(false);\n  }\n\n  const onShowModal = () => {\n    setShowModal(true);\n  }\n\n  const onCreateModal = () => {\n    setEditMode(false);\n  }\n\n  const onEditItem = ( item ) => {\n    setEditMode(true);\n    setItemEdit(item);\n    onShowModal();\n  }\n\n  const onCreateItem = () => {\n    onShowModal();\n    onCreateModal();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Todo List</h1>\n        <button onClick={onCreateItem} className=\"add-button\">+</button>\n      </header>\n\n      <Provider store={store}>\n        <TodoList onEditItem={onEditItem} />\n        <Modal show={showModal} onHideModal={onHideModal}>\n          <TodoForm onHideModal={onHideModal} editMode={editMode} itemEdit={itemEdit}/>\n        </Modal>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","\n\nexport default function listReducer(state = [], action) {\n\n    switch(action.type) {\n        case 'ADD_ITEM':\n            return [...state, action.payload];\n        case 'REMOVE_ITEM':\n            return state.filter(it => it.id !== action.payload);\n        case 'EDIT_ITEM':\n            return state.map(it => {\n                if(it.id === action.payload.id) {\n                    return action.payload;\n                }\n                else {\n                    return it;\n                }\n            });\n        case 'CHANGE_DONE':\n            return state.map(it => {\n                if(it.id === action.payload) {\n                    it.done = !it.done;\n                }\n                return it;\n            });\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}